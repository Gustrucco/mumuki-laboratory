---
en:
  expectation_HasBinding: '<strong>%{binding}</strong> %{must} be defined'
  expectation_HasComposition: '<strong>%{binding}</strong> %{must} use composition'
  expectation_HasComprehension: '<strong>%{binding}</strong> %{must} use list comprehensions'
  expectation_HasConditional: '<strong>%{binding}</strong> %{must} use conditionals'
  expectation_HasDirectRecursion: '<strong>%{binding}</strong> %{must} use recursion'
  expectation_HasGuards: '<strong>%{binding}</strong> %{must} use guards'
  expectation_HasIf: '<strong>%{binding}</strong> %{must} use if'
  expectation_HasLambda: '<strong>%{binding}</strong> %{must} use lambda expressions'
  expectation_HasRedundantBooleanComparison: '<strong>%{binding}</strong> has redundant boolean comparisons'
  expectation_HasRedundantGuards: '<strong>%{binding}</strong> has redundant guards'
  expectation_HasRedundantIf: '<strong>%{binding}</strong> has redundant ifs'
  expectation_HasRedundantLambda: '<strong>%{binding}</strong> has redundant lambdas'
  expectation_HasRedundantParameter: '<strong>%{binding}</strong> has redundant parameters - you may avoid them using point-free'
  expectation_HasTypeDeclaration: 'type <strong>%{binding}</strong> %{must} be defined'
  expectation_HasTypeSignature: 'Signature for <strong>%{binding}</strong> %{must} be declared'
  expectation_HasUsage: '<strong>%{binding}</strong> %{must} use <strong>%{target}</strong>'
  expectation_HasWhile: '<strong>%{binding}</strong> %{must} use conditional repetition (<i>while</i> sentence)'
  expectation_must: must
  expectation_must_not: must not
